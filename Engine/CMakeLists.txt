cmake_minimum_required(VERSION 3.3)

# Copy DLL from the given path to the EXE binary immediate directory (will be copied to output dir in the end)
function(copy_dlls bindir outdir dllnames)
    FOREACH(dllname ${dllnames})
    set(curr_dll ${bindir}/${dllname})
    if(EXISTS ${curr_dll})
        #add_custom_command(TARGET Engine POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${curr_dll}" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug/${dllname}")
        execute_process(COMMAND cmake -E copy ${curr_dll} ${outdir}/${dllname})
    else()
        message("File doesn't exist: ${curr_dll}")
    endif()
    ENDFOREACH()
endfunction()

# Link to a list of libraries
function(link_libs libdir libnames config)
    FOREACH(libname ${libnames})
        set(curr_lib ${libdir}/${libname})
        if(EXISTS ${curr_lib})
            target_link_libraries(Engine ${config} ${curr_lib})
        else()
            message("File doesn't exist: ${curr_lib}")
        endif()
    ENDFOREACH()
endfunction()

# Gather c++ files
file(GLOB_RECURSE SRC_FILES 
	Source/*.cpp
	Source/*.h
)

set(PHYSX_INC_DIR "${EXTERNAL_LIB_DIR}/physx/include")
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    if("${CMAKE_GENERATOR}" MATCHES "(Win64|IA64)")
        set(VS_PLATFORM_NAME "x64")
    else()
        set(VS_PLATFORM_NAME "x86")
    endif()
    if(MSVC_VERSION GREATER_EQUAL 1910)
        set(VS_COMPILER_NAME "vc15")
    else()
        set(VS_COMPILER_NAME "vc14")
    endif()
    set(PHYSX_LIB_DIR "${EXTERNAL_LIB_DIR}/physx/lib/${VS_COMPILER_NAME}/${VS_PLATFORM_NAME}")
    set(PHYSX_BIN_DIR "${EXTERNAL_LIB_DIR}/physx/bin/${VS_COMPILER_NAME}/${VS_PLATFORM_NAME}")

    set(PHYSX_RELESE_BINS PhysX3_${VS_PLATFORM_NAME}.dll PhysX3Common_${VS_PLATFORM_NAME}.dll PxFoundation_${VS_PLATFORM_NAME}.dll)
    set(PHYSX_DEBUG_BINS PhysX3CommonDEBUG_${VS_PLATFORM_NAME}.dll PhysX3DEBUG_${VS_PLATFORM_NAME}.dll PxFoundationDEBUG_${VS_PLATFORM_NAME}.dll)
    set(PHYSX_RELESE_LIBS PhysX3_${VS_PLATFORM_NAME}.lib PhysX3Common_${VS_PLATFORM_NAME}.lib PhysX3Extensions.lib PxFoundation_${VS_PLATFORM_NAME}.lib)
    set(PHYSX_DEBUG_LIBS PhysX3CommonDEBUG_${VS_PLATFORM_NAME}.lib PhysX3DEBUG_${VS_PLATFORM_NAME}.lib PhysX3ExtensionsDEBUG.lib PxFoundationDEBUG_${VS_PLATFORM_NAME}.lib)
endif()

include_directories ("Source")
include_directories (${PHYSX_INC_DIR})
include_directories ("../Core/Source")
include_directories ("../Rendering/Source")
include_directories ("../Networking/Source")
include_directories ("../Include/glm")
include_directories (${SDL2_INCLUDE_DIR})
include_directories ("../3rdParty/assimp/include")
include_directories ("${BUILD_ROOT}/3rdParty/assimp/include")

add_library(Engine STATIC ${SRC_FILES})

target_link_libraries(Engine Rendering)
target_link_libraries(Engine Core)
target_link_libraries(Engine Networking)
target_link_libraries(Engine ${SDL2_LIBRARIES})
target_link_libraries(Engine assimp)
target_link_libraries(Engine assimp)

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    if(MING3D_PHYSICS_API STREQUAL "PhysX")
        link_libs(${PHYSX_LIB_DIR} "${PHYSX_RELESE_LIBS}" optimized)
        link_libs(${PHYSX_LIB_DIR} "${PHYSX_DEBUG_LIBS}" debug)

        copy_dlls(${PHYSX_BIN_DIR} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/release "${PHYSX_RELESE_BINS}")
        copy_dlls(${PHYSX_BIN_DIR} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug "${PHYSX_DEBUG_BINS}")
    endif()
endif()
